import sys
sys.stdin = open('input.txt')

#     상  하 좌 우  좌상 우상 좌하 우하
dx = [-1, 1, 0, 0, -1, -1,  1,  1]
dy = [0, 0, -1, 1, -1,  1, -1,  1]
def search(x, y):
    point = data[x][y]  # 기준점의 값 기록하기
    count = 0           # 기준점보다 낮은 지역인지 판별하기

    for k in range(8):  # 8방향에 대해서 조사하기
        nx = x + dx[k]
        ny = y + dy[k]
        # 다음 조사대상 nx, ny가 범위를 벗어나지 않는다면
        # 2. 각 좌표를 기준으로 8방향의 값이 본인보다 작은 경우를 찾는다.
        if 0 <= nx < N and 0 <= ny < M:
            # 다음 조사 대상이 기준점보다 작다면
            if point > data[nx][ny]:
                # 2-1. 찾았다면, 그 개수를 기록한다.
                count += 1  # 조사 가능지점 1 증가
                # 만약 조사 가능지점이 4개 이상이라면,
                # x, y 좌표 위치는 후보지가 되었으므로
                if count >= 4:
                    '''
                        2-2. 추가 체크 포인트)
                            4개 이상이기만 하면 되므로, 
                            4개를 찾은경우, 더 이상 조사를 하지 않아도 된다.
                        3-1. 4개 이상인 경우를 성공, 4개 미만인 경우를 실패로 정하기
                    '''
                    # 성공을 반환
                    return True
    # 8방향에 대해 모두 조사를 완료하였음에도
    # if count >= 4: 조건을 통과한 적이 단 한번도 없어서
    # return True 를 통해 함수가 종료되지 못하고
    # 이곳까지 코드가 실행되었다면
    # 후보지가 될 수 없으므로 실패를 반환
    # 3-1. 4개 이상인 경우를 성공, 4개 미만인 경우를 실패로 정하기
    return False


T = int(input())
for tc in range(1, T+1):
    # N = 세로, M = 가로
    N, M = map(int, input().split())
    # N번에 걸쳐 입력 받은 데이터
    data = [list(map(int, input().split())) for _ in range(N)]

    # # 입력 데이터 출력 확인
    # # 데이터 출력 후, 출력 결과의 sol(1) 이라고 적힌 부분에
    # # 우클릭하여, pin tab을 눌러주면,
    # # 이후에는 아래 코드를 주석 처리하고 코드를 다시 실행 시켜도
    # # 그 결과는 고정되어 있어 재 확인 할 수 있다.
    # for i in range(N):
    #     print(data[i])
    # print()

    '''
        문제의 핵심.
        N*M 데이터의 모든 좌표지점에서, 8방향을 조사하였을때,
        조사 가능한 범위 내의 값들이 기준점보다 낮은 경우가 4개 이상인 경우를 파악
        
        1. 모든 좌표에 대해서 조사를 진행한다.
        2. 각 좌표를 기준으로 8방향의 값이 본인보다 작은 경우를 찾는다.
            2-1. 찾았다면, 그 개수를 기록한다.
            2-2. 추가 체크 포인트)
                    4개 이상이기만 하면 되므로, 
                    4개를 찾은경우, 더 이상 조사를 하지 않아도 된다.
        3. 기록된 개수가 4개 이상인 경우만 파악한다. 
            3-1. 4개 이상인 경우를 성공, 4개 미만인 경우를 실패로 정하기
            3-2. 혹은, 4개 이상인 경우를 발견하였다면 최종결괏값 1증가시키기
            3-3. 위 2가지 방법 중 하나를 선택.
        - 본 풀이 코드에서는 2-1, 2-2와 3-1의 방식으로 진행한다.
    '''
    result = 0  # 총 후보지 개수
    # 1. 모든 좌표에 대해서 조사를 진행한다.
    for x in range(N):
        for y in range(M):
            # search 함수의 반환 값은 True or False 이다.
            # 파이썬에서 0 + True는 자동으로 0 + 1로 변환된다.
            # 0 + Fasle는 0 + 0이다.
            # 따라서, search 함수를 통해 후보지가 될 수 있는 경우를 발견했다면,
            # True를 반환해 result가 1 증가할 것이고, 반대라면 아니다.
            result += search(x, y)
    # 모든 방향에 조사가 완료되었다면 결과 출력
    print(f'#{tc} {result}')
